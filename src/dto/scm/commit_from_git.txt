{
  "sha": "8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8",
  "node_id": "MDY6Q29tbWl0MTU4NjkxNTQ5OjhkNjQzOTllYTVlYmI3YmUzOTViYmZiNDcwYzRlMTI5YzNjZTlmZDg=",
  "commit": {
    "author": {
      "name": "lokshin",
      "email": "evgene.lokshin@microfocus.com",
      "date": "2019-08-06T09:01:14Z"
    },
    "committer": {
      "name": "lokshin",
      "email": "evgene.lokshin@microfocus.com",
      "date": "2019-08-06T09:01:14Z"
    },
    "message": "Defect #828193:  [Team City] Testing framework support Abort/Cancel.",
    "tree": {
      "sha": "7cf174917ea2765cad2da85750b2739315a1fa44",
      "url": "https://api.github.com/repos/elokshin/octane-teamcity-plugin/git/trees/7cf174917ea2765cad2da85750b2739315a1fa44"
    },
    "url": "https://api.github.com/repos/elokshin/octane-teamcity-plugin/git/commits/8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/elokshin/octane-teamcity-plugin/commits/8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8",
  "html_url": "https://github.com/elokshin/octane-teamcity-plugin/commit/8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8",
  "comments_url": "https://api.github.com/repos/elokshin/octane-teamcity-plugin/commits/8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "f1f5d8788fed6e4d4473610bd50fa94b95b25516",
      "url": "https://api.github.com/repos/elokshin/octane-teamcity-plugin/commits/f1f5d8788fed6e4d4473610bd50fa94b95b25516",
      "html_url": "https://github.com/elokshin/octane-teamcity-plugin/commit/f1f5d8788fed6e4d4473610bd50fa94b95b25516"
    }
  ],
  "stats": {
    "total": 163,
    "additions": 84,
    "deletions": 79
  },
  "files": [
    {
      "sha": "02e4223fa021fba330192d80e2fab437e76cfb52",
      "filename": "plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/events/ProgressEventsListener.java",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/elokshin/octane-teamcity-plugin/blob/8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8/plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/events/ProgressEventsListener.java",
      "raw_url": "https://github.com/elokshin/octane-teamcity-plugin/raw/8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8/plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/events/ProgressEventsListener.java",
      "contents_url": "https://api.github.com/repos/elokshin/octane-teamcity-plugin/contents/plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/events/ProgressEventsListener.java?ref=8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8",
      "patch": "@@ -126,6 +126,11 @@ public void changesLoaded(@NotNull SRunningBuild build) {\n \t\tOctaneSDK.getClients().forEach(client -> client.getEventsService().publishEvent(scmEvent));\n \t}\n \n+\t@Override\n+\tpublic void buildInterrupted(@NotNull SRunningBuild build) {\n+\t\tbuildFinished(build);\n+\t}\n+\n \t@Override\n \tpublic void buildFinished(@NotNull SRunningBuild build) {\n \t\tTriggeredBy triggeredBy = build.getTriggeredBy();\n@@ -144,7 +149,7 @@ public void buildFinished(@NotNull SRunningBuild build) {\n \t\t\t\t.setStartTime(build.getStartDate().getTime())\n \t\t\t\t.setEstimatedDuration(build.getDurationEstimate() * 1000)\n \t\t\t\t.setDuration(build.getDuration() * 1000)\n-\t\t\t\t.setResult(modelCommonFactory.resultFromNativeStatus(build.getBuildStatus()));\n+\t\t\t\t.setResult(modelCommonFactory.resultFromNativeStatus(build.getBuildStatus(), build.isInterrupted()));\n \t\tOctaneSDK.getClients().forEach(client -> client.getEventsService().publishEvent(event));\n \t}\n "
    },
    {
      "sha": "1dac04c0f928d22331a92eaf3c1311ec1180376f",
      "filename": "plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/factories/ModelCommonFactory.java",
      "status": "modified",
      "additions": 77,
      "deletions": 77,
      "changes": 154,
      "blob_url": "https://github.com/elokshin/octane-teamcity-plugin/blob/8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8/plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/factories/ModelCommonFactory.java",
      "raw_url": "https://github.com/elokshin/octane-teamcity-plugin/raw/8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8/plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/factories/ModelCommonFactory.java",
      "contents_url": "https://api.github.com/repos/elokshin/octane-teamcity-plugin/contents/plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/factories/ModelCommonFactory.java?ref=8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8",
      "patch": "@@ -37,90 +37,90 @@\n  */\n \n public class ModelCommonFactory {\n-    private static final DTOFactory dtoFactory = DTOFactory.getInstance();\n+\tprivate static final DTOFactory dtoFactory = DTOFactory.getInstance();\n \n-    @Autowired\n-    private TCPluginParametersFactory parametersFactory;\n-    @Autowired\n-    private ProjectManager projectManager;\n+\t@Autowired\n+\tprivate TCPluginParametersFactory parametersFactory;\n+\t@Autowired\n+\tprivate ProjectManager projectManager;\n \n-    public CIJobsList createProjectList() {\n-        CIJobsList ciJobsList = dtoFactory.newDTO(CIJobsList.class);\n-        List<PipelineNode> list = new ArrayList<>();\n-        List<String> ids = new ArrayList<>();\n+\tpublic CIJobsList createProjectList() {\n+\t\tCIJobsList ciJobsList = dtoFactory.newDTO(CIJobsList.class);\n+\t\tList<PipelineNode> list = new ArrayList<>();\n+\t\tList<String> ids = new ArrayList<>();\n \n-        PipelineNode buildConf;\n-        for (SProject project : projectManager.getProjects()) {\n+\t\tPipelineNode buildConf;\n+\t\tfor (SProject project : projectManager.getProjects()) {\n \n-            List<SBuildType> buildTypes = project.getBuildTypes();\n-            for (SBuildType buildType : buildTypes) {\n-                if (!ids.contains(buildType.getInternalId())) {\n-                    ids.add(buildType.getInternalId());\n-                    buildConf = dtoFactory.newDTO(PipelineNode.class)\n-                            .setJobCiId(buildType.getExternalId())\n-                            .setName(buildType.getName())\n-                            .setParameters(parametersFactory.obtainFromBuildType(buildType));\n-                    list.add(buildConf);\n-                }\n-            }\n-        }\n+\t\t\tList<SBuildType> buildTypes = project.getBuildTypes();\n+\t\t\tfor (SBuildType buildType : buildTypes) {\n+\t\t\t\tif (!ids.contains(buildType.getInternalId())) {\n+\t\t\t\t\tids.add(buildType.getInternalId());\n+\t\t\t\t\tbuildConf = dtoFactory.newDTO(PipelineNode.class)\n+\t\t\t\t\t\t\t.setJobCiId(buildType.getExternalId())\n+\t\t\t\t\t\t\t.setName(buildType.getName())\n+\t\t\t\t\t\t\t.setParameters(parametersFactory.obtainFromBuildType(buildType));\n+\t\t\t\t\tlist.add(buildConf);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n \n-        ciJobsList.setJobs(list.toArray(new PipelineNode[list.size()]));\n-        return ciJobsList;\n-    }\n+\t\tciJobsList.setJobs(list.toArray(new PipelineNode[list.size()]));\n+\t\treturn ciJobsList;\n+\t}\n \n-    public PipelineNode createStructure(String buildConfigurationId) {\n-        SBuildType root = projectManager.findBuildTypeByExternalId(buildConfigurationId);\n-        PipelineNode treeRoot = null;\n-        if (root != null) {\n-            treeRoot = dtoFactory.newDTO(PipelineNode.class)\n-                    .setJobCiId(root.getExternalId())\n-                    .setName(root.getName())\n-                    .setParameters(parametersFactory.obtainFromBuildType(root));\n+\tpublic PipelineNode createStructure(String buildConfigurationId) {\n+\t\tSBuildType root = projectManager.findBuildTypeByExternalId(buildConfigurationId);\n+\t\tPipelineNode treeRoot = null;\n+\t\tif (root != null) {\n+\t\t\ttreeRoot = dtoFactory.newDTO(PipelineNode.class)\n+\t\t\t\t\t.setJobCiId(root.getExternalId())\n+\t\t\t\t\t.setName(root.getName())\n+\t\t\t\t\t.setParameters(parametersFactory.obtainFromBuildType(root));\n \n-            List<PipelineNode> pipelineNodeList = buildFromDependenciesFlat(root.getOwnDependencies());\n-            if (!pipelineNodeList.isEmpty()) {\n-                PipelinePhase phase = dtoFactory.newDTO(PipelinePhase.class)\n-                        .setName(\"teamcity_dependencies\")\n-                        .setBlocking(true)\n-                        .setJobs(pipelineNodeList);\n-                List<PipelinePhase> pipelinePhaseList = new ArrayList<PipelinePhase>();\n-                pipelinePhaseList.add(phase);\n-                treeRoot.setPhasesPostBuild(pipelinePhaseList);\n-            }\n-        } else {\n-            //should update the response?\n-        }\n-        return treeRoot;\n-    }\n+\t\t\tList<PipelineNode> pipelineNodeList = buildFromDependenciesFlat(root.getOwnDependencies());\n+\t\t\tif (!pipelineNodeList.isEmpty()) {\n+\t\t\t\tPipelinePhase phase = dtoFactory.newDTO(PipelinePhase.class)\n+\t\t\t\t\t\t.setName(\"teamcity_dependencies\")\n+\t\t\t\t\t\t.setBlocking(true)\n+\t\t\t\t\t\t.setJobs(pipelineNodeList);\n+\t\t\t\tList<PipelinePhase> pipelinePhaseList = new ArrayList<PipelinePhase>();\n+\t\t\t\tpipelinePhaseList.add(phase);\n+\t\t\t\ttreeRoot.setPhasesPostBuild(pipelinePhaseList);\n+\t\t\t}\n+\t\t} else {\n+\t\t\t//should update the response?\n+\t\t}\n+\t\treturn treeRoot;\n+\t}\n \n-    private List<PipelineNode> buildFromDependenciesFlat(List<Dependency> dependencies) {\n-        List<PipelineNode> result = new LinkedList<>();\n-        if (dependencies != null) {\n-            for (Dependency dependency : dependencies) {\n-                SBuildType build = dependency.getDependOn();\n-                if (build != null) {\n-                    PipelineNode buildItem = dtoFactory.newDTO(PipelineNode.class)\n-                            .setJobCiId(build.getExternalId())\n-                            .setName(build.getName())\n-                            .setParameters(parametersFactory.obtainFromBuildType(build));\n-                    result.add(buildItem);\n-                    result.addAll(buildFromDependenciesFlat(build.getOwnDependencies()));\n-                }\n-            }\n-        }\n-        return result;\n-    }\n+\tprivate List<PipelineNode> buildFromDependenciesFlat(List<Dependency> dependencies) {\n+\t\tList<PipelineNode> result = new LinkedList<>();\n+\t\tif (dependencies != null) {\n+\t\t\tfor (Dependency dependency : dependencies) {\n+\t\t\t\tSBuildType build = dependency.getDependOn();\n+\t\t\t\tif (build != null) {\n+\t\t\t\t\tPipelineNode buildItem = dtoFactory.newDTO(PipelineNode.class)\n+\t\t\t\t\t\t\t.setJobCiId(build.getExternalId())\n+\t\t\t\t\t\t\t.setName(build.getName())\n+\t\t\t\t\t\t\t.setParameters(parametersFactory.obtainFromBuildType(build));\n+\t\t\t\t\tresult.add(buildItem);\n+\t\t\t\t\tresult.addAll(buildFromDependenciesFlat(build.getOwnDependencies()));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n \n-    public CIBuildResult resultFromNativeStatus(Status status) {\n-        CIBuildResult result = CIBuildResult.UNAVAILABLE;\n-        if (status == Status.ERROR || status == Status.FAILURE) {\n-            result = CIBuildResult.FAILURE;\n-        } else if (status == Status.WARNING) {\n-            result = CIBuildResult.UNSTABLE;\n-        } else if (status == Status.NORMAL) {\n-            result = CIBuildResult.SUCCESS;\n-        }\n-        return result;\n-    }\n+\tpublic CIBuildResult resultFromNativeStatus(Status status, boolean isInterrupted) {\n+\t\tCIBuildResult result = isInterrupted ? CIBuildResult.ABORTED : CIBuildResult.UNAVAILABLE;\n+\t\tif (status == Status.ERROR || status == Status.FAILURE) {\n+\t\t\tresult = CIBuildResult.FAILURE;\n+\t\t} else if (status == Status.WARNING) {\n+\t\t\tresult = CIBuildResult.UNSTABLE;\n+\t\t} else if (status == Status.NORMAL) {\n+\t\t\tresult = CIBuildResult.SUCCESS;\n+\t\t}\n+\t\treturn result;\n+\t}\n }"
    },
    {
      "sha": "6858bde74b1e7719c5b1bcd89e13d4e80fc19569",
      "filename": "plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/factories/SnapshotsFactory.java",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/elokshin/octane-teamcity-plugin/blob/8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8/plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/factories/SnapshotsFactory.java",
      "raw_url": "https://github.com/elokshin/octane-teamcity-plugin/raw/8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8/plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/factories/SnapshotsFactory.java",
      "contents_url": "https://api.github.com/repos/elokshin/octane-teamcity-plugin/contents/plugin/src/main/java/com/hp/octane/plugins/jetbrains/teamcity/factories/SnapshotsFactory.java?ref=8d64399ea5ebb7be395bbfb470c4e129c3ce9fd8",
      "patch": "@@ -213,7 +213,7 @@ private SnapshotNode createHistoryBuild(SBuildType build, String rootId) {\n \t\t\t\t\t.setStartTime(currentBuild.getStartDate().getTime())\n \t\t\t\t\t.setCauses(null)\n \t\t\t\t\t.setStatus(CIBuildStatus.FINISHED)\n-\t\t\t\t\t.setResult(modelCommonFactory.resultFromNativeStatus(currentBuild.getBuildStatus()));\n+\t\t\t\t\t.setResult(modelCommonFactory.resultFromNativeStatus(currentBuild.getBuildStatus(), false));\n \t\t}\n \n \t\treturn result;"
    }
  ]
}